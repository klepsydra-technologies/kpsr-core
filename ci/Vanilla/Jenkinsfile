def kpsrThirdPartiesECR = "337955887028.dkr.ecr.us-east-2.amazonaws.com/kpsr-docker-registry/github/kpsr-thirdparties"
def kpsrCoreECR = "337955887028.dkr.ecr.us-east-2.amazonaws.com/kpsr-docker-registry/github/kpsr-core"

pipeline {
  agent any
  environment {
    local_branch = env.GIT_BRANCH.replaceAll('/', '_')
    method = 'Vanilla'
  }
  stages {
    stage('Download System Dependencies') {
      steps {
        echo 'Pull dependencies from repository'
        sh 'rm  ~/.dockercfg || true'
        sh 'rm ~/.docker/config.json || true'
      }
    }
    stage('Download System Dependencies') {
      steps {
        docker.withRegistry("https://${kpsrCoreECR}", "ecr:us-east-2:AWS_ECR_CREDENTIALS") {
          docker.image("${kpsrCoreECR}:sys_dep_ubuntu_18").pull()
        }

      sh "docker tag ${kpsrCoreECR}:sys_dep_ubuntu_18 kpsr-core:sys_dep_ubuntu_18"
      }
    }
    stage('Compile') {
      steps {
        sh "docker build -f ./ci/${method}/Dockerfile . \
                --build-arg=BUILD_ID=${BUILD_ID} \
                --target compile_docker"
      }
    }
    stage('Test') {
      steps {
        sh 'imageid=$(docker images -a \
          -f "label=kpsr-core=compile_docker" \
          -f "label=BUILD_ID=${BUILD_ID}" \
          -f "label=method=${method}" --format "{{.ID}}"))'

        sh 'name_container=kpsr-core_test_${method}_${BUILD_ID}; \
        docker run -d --name ${name_container} ${imageid} tail -f /dev/null; \
        docker exec --workdir /opt/kpsr-core/build/ ${name_container} bash ../kpsr-build/scripts/make_cppcheck.sh; \
        docker exec --workdir /opt/kpsr-core/build/ ${name_container} make test_coverage_cobertura && export test_passed=1; \
        docker exec --workdir /opt/kpsr-core/build/ ${name_container} make doc && export docs_generated=1; \
        docker exec --workdir /opt/kpsr-core/build/ ${name_container} sed -i -e "s@[./]opt[./]kpsr-core[./]@@g" code_generator/kpsr_codegen/coverage.xml; \
        docker cp ${name_container}:/opt/kpsr-core/build/ . \
        docker rm -f ${name_container}; \
        '
        // Run cppcheck
        publishCppcheck(
          pattern: '**/cppcheck-result.xml',
          ignoreBlankFiles: false, threshold: '19',
          allowNoReport: false,
          newThreshold: '', failureThreshold: '',
          newFailureThreshold: '', healthy: '', unHealthy: '',
          severityError: true,
          severityWarning: true,
          severityStyle: true,
          severityPerformance: true,
          severityInformation: true,
          severityNoCategory: true,
          severityPortability: true,
          XSize: 1000, YSize: 200,
          numBuildsInGraph: 0,
          displayAllErrors: true,
          displayErrorSeverity: true,
          displayNoCategorySeverity: true,
          displayPerformanceSeverity: true,
          displayPortabilitySeverity: true,
          displayStyleSeverity: true,
          displayWarningSeverity: true
        )

        cobertura(coberturaReportFile: 'build/coverage.xml,build/code_generator/kpsr_codegen/coverage.xml', failUnhealthy: false, failUnstable: false, onlyStable: false)

        if (env.test_passed == null || env.docs_generated == null )  {
          currentBuild.result = 'FAILED'
          return
        }
      }
    }
    stage('Publish test_results') {
      steps {
        echo 'Testing..'
        script {
          // if we are in a PR
          if (env.CHANGE_ID) {
            publishCoverageGithub(filepath: 'build/coverage.xml', coverageXmlType: 'cobertura', comparisonOption: [value: 'optionFixedCoverage', fixedCoverage: '0.80'], coverageRateType: 'Line')
          }
        }
      }
    }
    stage('Install') {
      steps {
        sh "docker build -f ./ci/${method}/Dockerfile . \
                --build-arg=BUILD_ID=${BUILD_ID} \
                -t kpsr-core:${local_branch}_${BUILD_ID}_${method}"
      }
    }
    stage('Publish to ECR') {
      steps {
        script {
          docker.withRegistry("https://${kpsrCoreECR}", "ecr:us-east-2:AWS_ECR_CREDENTIALS") {
            sh "name_docker=kpsr-core:${local_branch}_${BUILD_ID}_${method}"
            sh "docker tag ${name_docker} ${kpsrCoreECR}:${name_docker} && docker push ${kpsrCoreECR}:${name_docker}"
          }
        }
      }
    }
  }
}
